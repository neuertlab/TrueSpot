%Main script for executing spot detection 
%Blythe Hospelhorn
%Modified from code written by Ben Kesler & Gregor Neuert
%Version 1.0.0
%Updated Feb 19, 2021

%Update history
%   2021.02.19 | 1.0.0
%       - Initial documentation
%       - Overhaul so that it runs spot detect normally THEN masks the result
%       instead of running detect on the masked image (which does not work)

%%
% Run 3D spot detection on the provided image stack and output result
% tables to specified path. Then use the provided background mask to filter
% for spots that fall in the background and save filtered tables and
% images.
%   This is designed to be callable from the commandline.
%
% ARGS
%   img_name (string) - Label for image, used in output file naming
%   inpath (string) - Path to input tiff image stack.
%   maskpath (string) - Path to bkg mask file (must be a matlab object
%       containing a YxX logical matrix)
%   out_superdir (string) - Path to output directory (subdirectories will
%       be generated by this script)
%   chID (int) - Index of image channel to process.
%   chCount (int) - Total number of channels in input image.
%   t_min (int) - Minimum filter threshold to try (suggested: 1 if don't
%       know)
%   t_max (int) - Maximum filter threshold to try (suggested: 200-300)
%   dead_pix_detect (bool) - Whether to rerun dead pixel detection
%       (suggested: false)
%
% OUTPUTS
%   - 3D coordinate tables full & masked (matlab format)
%   - Collapsed 2D coordinate tables full & masked (matlab format)
%   - Table of spot counts vs. thresholds (2D and 3D, full & masked,
%       all matlab format)
%   - Scaled-down filtered max z projections of the input image with info
%       on how to scale the intensities for viewing (for downstream
%       visualization, matlab format) Full & masked images
%   - A copy of the 3D image (full & masked) filtered as a MATLAB matrix (matlab format)
%
% NOTES
%   -> As with the base version of this script, I would advise against
%   rerunning dead pixel detection on Linux. See Main_RNASpotDetect for
%   details.
%
function Main_RNASpotDetectBkgMasked(img_name, inpath, maskpath, out_superdir, chID, chCount, t_min, t_max, dead_pix_detect)

    addpath('./core');
    strat = 'all_3d';
    
    %Call the plain main script to run detection...
    Main_RNASpotDetect(img_name, inpath, out_superdir, chID, chCount, t_min, t_max, dead_pix_detect);
    
    %Load mask
    bkg_mask = Background_Extractor.loadMaskFrom(maskpath);
    
    %Mask the output and save
    bkgnamestem = [img_name '_bkgmasked_'];
    ogsave_stem = [out_superdir filesep img_name '_' strat];
    save_stem = [out_superdir filesep bkgnamestem '_' strat];
    
    %Images...
    load([ogsave_stem '_prefilteredIMG'], 'img_filter');
    load([ogsave_stem '_imgviewstructs'], 'my_images');
    
    Z = size(img_filter,3);
    for z = 1:Z
        img_filter(:,:,z) = immultiply(img_filter(:,:,z), bkg_mask);
    end
    save([save_stem '_prefilteredIMG'], 'img_filter');
    
    my_images(1).image = immultiply(my_images(1).image(:,:), bkg_mask);
    my_images(2).image = immultiply(my_images(2).image(:,:), bkg_mask);
    save([save_stem '_imgviewstructs'], 'my_images');
    
    %Coordinate tables & spot counts...
    load([ogsave_stem '_coordTable'], 'coord_table');
    [spot_table, coord_table] = RNA_Threshold_Common.mask_spots(bkg_mask, coord_table);
    save([save_stem '_coordTable'], 'coord_table');
    save([save_stem '_spotTable'], 'spot_table');
   
    load([ogsave_stem '_coordTable2d'], 'coord_table_2D');
    [spot_table_2D, coord_table_2D] = RNA_Threshold_Common.mask_spots(bkg_mask, coord_table_2D);
    save([save_stem '_coordTable2d'], 'coord_table_2D');
    save([save_stem '_spotTable2d'], 'spot_table_2D');

end